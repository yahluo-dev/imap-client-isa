%%{init: { "class": { "height": 300, "width": 300 } } }%%
classDiagram
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% CLIENT
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Client {
    -void print_prompt()
    +repl()
    +ctrlc_handler(s: int)
  }

  note for Client "Handles interaction with the user, including a REPL in interactive mode"

  class ResponseFactory {
    +Response *create(m: string)
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% COMMANDS (by state of communication in which are expected by server)
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Command {
    +CommandType type
    +string tag
  }

  %% Any state

  class LogoutCommand {
    no fields
  }

  %% NAUTHD

  class StarttlsCommand {
    no fields
  }

  class LoginCommand {
    +string user_name
    +string password
  }

  %% AUTHD

  class SelectCommand {
    +string mailbox_name
  }

  %% SELECTED

  class SearchCommand {
    - searching criteria?
  }

  class FetchCommand {
    -vector<int> sequence_set
    -FetchType type
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% RESPONSES
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Response {
    +ResponseType type
  }

  class OkResponse {
    +Tag tag
    +string text
  }

  class NoResponse {
    +Tag tag
    +string text
  }

  class BadResponse {
    +Tag tag
    +string text
  }

  class PreauthResponse {
    +Tag tag
    +string text
  }

  class ByeResponse {
    +Tag tag
    +string text
  }

%%  class ListResponse {
%%    TODO
%%  }

  class SearchResponse {
     messages
  }

%%  class FlagsResponse {
%%    TODO
%%  }

%%  class ExistsResponse {
%%    no fields
%%  }

  class FetchResponse {
    +Tag tag
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% MESSAGE
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class IMFMessage {
    +Datetime date
    +std::string from
    +std::string to
    +std::string subject
    +std::string message_id
    +std::string body
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% SESSION
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Session {
    -imap_state_t state
    -string username
    -string password
  }

  note for Session "Handles user actions as sequences of requests on a high level"

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% SERVER
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Server {
    -socket sock
    +Server(hostname, port)
    +void connect()
    +void send_command()
    +void receive_response()
  }

  note for Server "Implements low-level connection and TLS-related logic"

  class TLSServer {
    +TLSServer(hostname, port)
    -void init_tls()
  }

  Server <|-- TLSServer

  Client -- Session : << uses >>
  Session -- Server : << uses >>

  <<Abstract>> Command
  Session -- Command : << instantiates >>
  Command <|-- LogoutCommand
  Command <|-- StarttlsCommand
  Command <|-- LoginCommand
  Command <|-- SelectCommand
  Command <|-- SearchCommand
  Command <|-- FetchCommand

  <<Abstract>> Response
  Server -- ResponseFactory : << uses >>
  ResponseFactory -- Response : << instantiates >>
  Response <|-- OkResponse
  Response <|-- NoResponse
  Response <|-- BadResponse
  Response <|-- PreauthResponse
  Response <|-- ByeResponse
  Response <|-- SearchResponse
%%  Response <|-- ListResponse
%%  Response <|-- FlagsResponse
%%  Response <|-- ExistsResponse
  Response <|-- FetchResponse

  FetchResponse -- IMFMessage
