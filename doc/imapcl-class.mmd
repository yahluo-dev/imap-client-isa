%%{init: { "class": { "height": 500, "width": 400 } } }%%
classDiagram
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% CLIENT
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Client {
    -void print_prompt()
    +repl()
  }

  note for Client "Handles interaction with the user, including a REPL in interactive mode"

  class ResponseParser {
    +ResponseParser(data: string)
    +Response *parse_next()
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% COMMANDS (by state of communication in which are expected by server)
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Command {
    +CommandType type
    +string tag
  }

  %% Any state

  class LogoutCommand {
    no fields
  }

  %% NAUTHD

  class StarttlsCommand {
    no fields
  }

  class LoginCommand {
    -string user_name
    -string password
    +LoginCommand(tag: string, username: string, password: string)
  }

  %% AUTHD

  class SelectCommand {
    +string mailbox_name
   +SelectCommand(tag: string, mailbox: string)
  }

  %% SELECTED

  class SearchCommand {
   +SearchCommand(tag: string, search_criteria: string)
  }

  class FetchCommand {
    -vector<int> sequence_set
    -FetchType type
    +FetchCommand(tag: string, seq_set: string, data_item: string)
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% RESPONSES
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Response {
    +ResponseType type
  }

  class StatusResponse {
    +Tag tag
    +string text
  }

%%  class ListResponse {
%%    TODO
%%  }

  class SearchResponse {
     messages
  }

%%  class FlagsResponse {
%%    TODO
%%  }

%%  class ExistsResponse {
%%    no fields
%%  }

  class FetchResponse {
    +Tag tag
    +string message_data
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% SESSION
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Session {
    -imap_state_t state
    -string username
    -string password
  }

  note for Session "Handles user actions as sequences of requests on a high level"

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% SERVER
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Server {
    -socket sock
    +Server(hostname, port)
    +void connect()
    +void send_command()
    +void receive_response()
  }

  note for Server "Implements low-level connection and TLS-related logic"

  class TLSServer {
    +TLSServer(hostname: string, port: int, cert_files:string, cert_dir:string)
  }

  Server <|-- TLSServer

  Client -- Session : << uses >>
  Session -- Server : << uses >>

  <<Abstract>> Command
  Session -- Command : << instantiates >>
  Command <|-- LogoutCommand
  Command <|-- StarttlsCommand
  Command <|-- LoginCommand
  Command <|-- SelectCommand
  Command <|-- SearchCommand
  Command <|-- FetchCommand

  <<Abstract>> Response
  Server -- ResponseParser : << uses >>
  ResponseParser -- Response : << instantiates >>
  Response <|-- StatusResponse
  Response <|-- SearchResponse
%%  Response <|-- ListResponse
%%  Response <|-- FlagsResponse
%%  Response <|-- ExistsResponse
  Response <|-- FetchResponse
