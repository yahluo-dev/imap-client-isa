%%{init: { "class": { "height": 500, "width": 400 } } }%%
classDiagram
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% CLIENT
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Client {
    -void print_prompt()
    +repl()
  }

  note for Client "Handles interaction with the user, including a REPL in interactive mode"

  class ResponseParser {
    -string data
    -int curr_pos
    -stack<int> pos_stack
    +ResponseParser(data: string)
    +Response *parse_next()
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% COMMANDS (by state of communication in which are expected by server)
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Command {
    +CommandType type
    +string tag
  }

  %% Any state

  class LogoutCommand {
    no fields
  }

  %% NAUTHD

  class StarttlsCommand {
    no fields
  }

  class LoginCommand {
    -string user_name
    -string password
    +LoginCommand(tag: string, \nusername: string, password: string)
  }

  %% AUTHD

  class SelectCommand {
    +string mailbox_name
   +SelectCommand(tag: string, mailbox: string)
  }

  %% SELECTED

  class SearchCommand {
   -string search_criteria
   +SearchCommand(tag: string, \nsearch_criteria: string)
  }

  class FetchCommand {
    -int[] sequence_set
    -string data_item
    +FetchCommand(tag: string, \nseq_set: string[], data_item: string)
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% RESPONSES
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Response {
    -ResponseType type
  }

  class StatusResponse {
    -Tag tag
    -string text
  }

  class SearchResponse {
    -int[] seq_numbers
  }

  class FlagsResponse {
   no fields
  }

  class SingleNumberResponse {
   -int number
  }

  class FetchResponse {
    +Tag tag
    +string message_data
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% RECEIVER
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  class Receiver {
   - string received_data
   - int client_socket
   - receive_inner()
   + Receiver(Server &server)
   + receive(Session &session)
  }

  class TLSReceiver {
   - SSL ssl
   - receive_inner()
   + TLSReceiver(TLSServer &server)
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% SESSION
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Session {
    -ImapState state
    -string username
    -string password
    -int last_tag
    -string get_new_tag()
    +login(creds: Credentials)
    +select(mailbox: string)
    +logout()
    +search(only_unseen: bool)
    +fetch(seq_set: int[], headers: bool)
    +read(seq_set: int[])
  }

  note for Session "Handles user actions as sequences of requests on a high level"

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% SERVER
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class Server {
    -socket sock
    +Server(hostname, port)
    +void connect()
    +void send_command()
    +void receive_response()
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% IMFMessage
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  class IMFMessage {
   -string data
   +get_datetime()
   +IMFMessage(_data: string)
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% IMFMessage
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  note for Server "Implements low-level connection and TLS-related logic"

  class TLSServer {
    +TLSServer(hostname: string, port: int, \ncert_files:string, cert_dir:string)
  }

  Server <|-- TLSServer

  Client -- Session : << uses >>
  Session -- Server : << uses >>

  <<Abstract>> Command
  Session -- Command : << instantiates >>
  Command <|-- LogoutCommand
  Command <|-- StarttlsCommand
  Command <|-- LoginCommand
  Command <|-- SelectCommand
  Command <|-- SearchCommand
  Command <|-- FetchCommand

  Server -- ResponseParser : << uses >>
  ResponseParser -- Response : << instantiates >>
  Response <|-- StatusResponse
  Response <|-- SearchResponse
  Response <|-- FlagsResponse
  Response <|-- SingleNumberResponse
  Response <|-- FetchResponse

  FetchResponse -- IMFMessage : << instantiates >>

  Receiver <|-- TLSReceiver

  Session -- Receiver : << notifies >>

